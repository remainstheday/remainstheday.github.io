{"version":3,"sources":["components/UserCard.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","user","className","description","name","App","useState","tweetData","setTweetData","cardData","setCardData","useEffect","fetch","then","response","json","data","statuses","type","onChange","event","filteredCards","filter","tweet","includes","target","value","map","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qPAWeA,EATE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACb,2BAAID,EAAKE,aACT,2BAAIF,EAAKG,S,YCsCAC,MApCf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,KA4Bb,OAxBAC,qBAAU,WACRC,MAPK,4IAQFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLR,EAAaQ,EAAKC,UAClBP,EAAYM,EAAKC,eAEpB,IAkBD,yBAAKf,UAAU,iBACb,2BAAOgB,KAAK,OAAOC,SAjBG,SAACC,GACzB,IAAMC,EAAgBd,EAAUe,QAAO,SAACC,GAAD,OACrCA,EAAMtB,KAAKE,YAAYqB,SAASJ,EAAMK,OAAOC,UAE/C,MAA8B,KAAvBN,EAAMK,OAAOC,MAChBhB,EAAYH,GACZG,EAAYW,MAYd,yBAAKnB,UAAU,aARVO,EAASkB,KAAI,SAACJ,EAAOK,GAC1B,OAAO,kBAAC,EAAD,CAAU3B,KAAMsB,EAAMtB,aCpBf4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fecfd2e2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst UserCard = ({ user }) => (\n  <div className=\"card\">\n    <div className=\"card-body\">\n      <p>{user.description}</p>\n      <p>{user.name}</p>\n    </div>\n  </div>\n);\n\nexport default UserCard;\n","import React, { useEffect, useState } from \"react\";\nimport UserCard from \"./components/UserCard\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nconst URL = `https://gist.githubusercontent.com/chadwithuhc/6240db2f7b415c8bf9ec7eed6bb2d56e/raw/10f6b97e7dd9ea113e63a38e75161b5660b6d248/tweets.json`;\n\nfunction App() {\n  const [tweetData, setTweetData] = useState([]);\n  const [cardData, setCardData] = useState([]);\n\n  useEffect(() => {\n    fetch(URL)\n      .then((response) => response.json())\n      .then((data) => {\n        setTweetData(data.statuses)\n        setCardData(data.statuses)\n      })\n  }, []);\n\n  const handleInputChange = (event) => {\n    const filteredCards = tweetData.filter((tweet) =>\n      tweet.user.description.includes(event.target.value)\n    );\n    return event.target.value === \"\"\n      ? setCardData(tweetData)\n      : setCardData(filteredCards);\n  };\n\n  const renderUsers = () => {\n    return cardData.map((tweet, index) => {\n      return <UserCard user={tweet.user} />;\n    });\n  };\n\n  return (\n    <div className=\"App container\">\n      <input type=\"text\" onChange={handleInputChange} />\n      <div className=\"card-grid\">{renderUsers()}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}